#!/usr/bin/env python3
"""
Outil de diagnostic pour r√©soudre les probl√®mes de connexion Satelix
"""

import os
import sys
import socket
import subprocess
import requests
from pathlib import Path
from dotenv import load_dotenv
from urllib.parse import urlparse
import time


class SatelixDiagnostic:
    """Diagnostic complet pour Satelix"""

    def __init__(self):
        """Initialisation du diagnostic"""
        load_dotenv('app/.env')

        self.login_url = os.getenv('SATELIX_URL_LOGIN')
        self.username = os.getenv('SATELIX_USER')
        self.password = os.getenv('SATELIX_PASSWORD')

        self.issues = []
        self.solutions = []

    def print_section(self, title):
        """Afficher une section de diagnostic"""
        print(f"\n{'='*60}")
        print(f" {title}")
        print(f"{'='*60}")

    def print_result(self, test_name, success, details=""):
        """Afficher le r√©sultat d'un test"""
        status = "‚úÖ OK" if success else "‚ùå ERREUR"
        print(f"{status:8} {test_name}")
        if details:
            print(f"         {details}")

        if not success:
            self.issues.append(f"{test_name}: {details}")

    def test_configuration(self):
        """Test de la configuration"""
        self.print_section("TEST DE CONFIGURATION")

        # Test fichier .env
        env_exists = Path('app/.env').exists()
        self.print_result("Fichier .env", env_exists,
                         "Pr√©sent" if env_exists else "Manquant - Lancez la configuration [1]")

        if not env_exists:
            return False

        # Test variables obligatoires
        required_vars = {
            'SATELIX_URL_LOGIN': self.login_url,
            'SATELIX_USER': self.username,
            'SATELIX_PASSWORD': self.password
        }

        all_vars_ok = True
        for var_name, var_value in required_vars.items():
            var_ok = bool(var_value and var_value.strip())
            self.print_result(f"Variable {var_name}", var_ok,
                             "D√©finie" if var_ok else "Manquante ou vide")
            if not var_ok:
                all_vars_ok = False

        return all_vars_ok

    def test_network_connectivity(self):
        """Test de connectivit√© r√©seau"""
        self.print_section("TEST DE CONNECTIVIT√â R√âSEAU")

        if not self.login_url:
            self.print_result("URL Satelix", False, "URL non configur√©e")
            return False

        # Parser l'URL
        parsed = urlparse(self.login_url)
        host = parsed.hostname
        port = parsed.port or 80

        # Test DNS
        try:
            ip = socket.gethostbyname(host)
            self.print_result("R√©solution DNS", True, f"{host} ‚Üí {ip}")
            dns_ok = True
        except socket.gaierror:
            self.print_result("R√©solution DNS", False, f"Impossible de r√©soudre {host}")
            self.solutions.append("V√©rifiez que vous √™tes connect√© au r√©seau de l'entreprise")
            self.solutions.append("Essayez de remplacer 'sql-industrie' par l'adresse IP directe")
            dns_ok = False

        if not dns_ok:
            return False

        # Test connexion TCP
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            result = sock.connect_ex((host, port))
            sock.close()

            tcp_ok = result == 0
            self.print_result("Connexion TCP", tcp_ok,
                             f"Port {port} accessible" if tcp_ok else f"Port {port} ferm√© ou inaccessible")

            if not tcp_ok:
                self.solutions.append(f"V√©rifiez que le service sur {host}:{port} est d√©marr√©")
                self.solutions.append("Contactez l'administrateur r√©seau")

        except Exception as e:
            self.print_result("Connexion TCP", False, str(e))
            tcp_ok = False

        return tcp_ok

    def test_http_access(self):
        """Test d'acc√®s HTTP"""
        self.print_section("TEST D'ACC√àS HTTP")

        if not self.login_url:
            return False

        try:
            # Test GET simple
            response = requests.get(self.login_url, timeout=15, verify=False)

            status_ok = response.status_code == 200
            self.print_result("Acc√®s HTTP", status_ok,
                             f"Code {response.status_code}" if not status_ok else "Page accessible")

            if not status_ok:
                if response.status_code == 404:
                    self.solutions.append("L'URL semble incorrecte (erreur 404)")
                elif response.status_code == 403:
                    self.solutions.append("Acc√®s refus√© - v√©rifiez les permissions")
                elif response.status_code >= 500:
                    self.solutions.append("Erreur serveur - contactez l'administrateur")

            # Test contenu de la page
            if status_ok:
                content = response.text.lower()
                has_login = any(term in content for term in ['login', 'connexion', 'mot de passe', 'utilisateur'])
                self.print_result("Page de connexion", has_login,
                                 "Formulaire de connexion d√©tect√©" if has_login else "Pas de formulaire trouv√©")

                if not has_login:
                    self.solutions.append("L'URL ne semble pas pointer vers une page de connexion")

            return status_ok

        except requests.exceptions.ConnectTimeout:
            self.print_result("Acc√®s HTTP", False, "Timeout de connexion")
            self.solutions.append("Le serveur met trop de temps √† r√©pondre")
            return False
        except requests.exceptions.ConnectionError:
            self.print_result("Acc√®s HTTP", False, "Erreur de connexion")
            self.solutions.append("Impossible de se connecter au serveur web")
            return False
        except Exception as e:
            self.print_result("Acc√®s HTTP", False, str(e))
            return False

    def test_selenium_requirements(self):
        """Test des pr√©requis Selenium"""
        self.print_section("TEST DES PR√âREQUIS SELENIUM")

        # Test Selenium
        try:
            import selenium
            self.print_result("Module Selenium", True, f"Version {selenium.__version__}")
        except ImportError:
            self.print_result("Module Selenium", False, "Module non install√©")
            self.solutions.append("Installez Selenium: pip install selenium")
            return False

        # Test Chrome
        chrome_found = False
        chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME', ''))
        ]

        for path in chrome_paths:
            if os.path.exists(path):
                self.print_result("Google Chrome", True, f"Trouv√©: {path}")
                chrome_found = True
                break

        if not chrome_found:
            self.print_result("Google Chrome", False, "Chrome non trouv√©")
            self.solutions.append("Installez Google Chrome depuis https://www.google.com/chrome/")

        # Test ChromeDriver
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options

            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')

            # Test rapide de cr√©ation du driver
            driver = webdriver.Chrome(options=options)
            driver.get('about:blank')
            driver.quit()

            self.print_result("ChromeDriver", True, "Fonctionnel")
            return True

        except Exception as e:
            self.print_result("ChromeDriver", False, str(e))
            self.solutions.append("Probl√®me avec ChromeDriver - r√©installez Chrome")
            return False

    def test_full_connection(self):
        """Test de connexion compl√®te avec Selenium"""
        self.print_section("TEST DE CONNEXION COMPL√àTE")

        if not all([self.login_url, self.username, self.password]):
            self.print_result("Param√®tres complets", False, "Configuration incompl√®te")
            return False

        try:
            from selenium import webdriver
            from selenium.webdriver.common.by import By
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC

            # Configuration Chrome
            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')

            print("   üîç Lancement du navigateur...")
            driver = webdriver.Chrome(options=options)
            wait = WebDriverWait(driver, 30)

            try:
                # Chargement de la page
                print(f"   üîç Chargement de {self.login_url}")
                driver.get(self.login_url)

                page_loaded = "satelix" in driver.title.lower() or len(driver.page_source) > 1000
                self.print_result("Chargement page", page_loaded,
                                 f"Titre: {driver.title[:50]}...")

                # Recherche des champs de connexion
                print("   üîç Recherche des champs de connexion...")
                try:
                    username_field = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[placeholder*='Utilisateur'], input[type='text'], input[name*='user']"))
                    )
                    self.print_result("Champ utilisateur", True, "Trouv√©")
                except:
                    self.print_result("Champ utilisateur", False, "Non trouv√©")
                    self.solutions.append("La page de connexion a peut-√™tre chang√©")
                    return False

                try:
                    password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password'], input[placeholder*='mot de passe']")
                    self.print_result("Champ mot de passe", True, "Trouv√©")
                except:
                    self.print_result("Champ mot de passe", False, "Non trouv√©")
                    return False

                # Test de saisie
                print("   üîç Test de saisie des identifiants...")
                username_field.clear()
                username_field.send_keys(self.username)
                password_field.clear()
                password_field.send_keys(self.password)

                self.print_result("Saisie identifiants", True, "Champs remplis")

                # Recherche du bouton de connexion
                login_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'connecter') or contains(text(), 'Connecter') or contains(text(), 'Se connecter')]")
                if not login_buttons:
                    login_buttons = driver.find_elements(By.CSS_SELECTOR, "button[type='submit'], input[type='submit']")

                if login_buttons:
                    self.print_result("Bouton connexion", True, f"{len(login_buttons)} bouton(s) trouv√©(s)")

                    # Test de clic (sans vraiment se connecter avec les vrais identifiants)
                    print("   üîç Simulation du clic de connexion...")
                    initial_url = driver.current_url
                    login_buttons[0].click()

                    # Attendre un changement (2 secondes max)
                    time.sleep(2)

                    # V√©rifier s'il y a eu un changement
                    url_changed = driver.current_url != initial_url
                    error_messages = driver.find_elements(By.XPATH, "//*[contains(text(), 'erreur') or contains(text(), 'incorrect') or contains(text(), 'invalide')]")

                    if url_changed:
                        self.print_result("R√©action connexion", True, "Redirection d√©tect√©e")
                    elif error_messages:
                        self.print_result("R√©action connexion", True, "Message d'erreur affich√© (normal)")
                    else:
                        self.print_result("R√©action connexion", False, "Aucune r√©action visible")

                else:
                    self.print_result("Bouton connexion", False, "Non trouv√©")
                    self.solutions.append("Le bouton de connexion a peut-√™tre chang√©")

                return True

            finally:
                driver.quit()

        except Exception as e:
            self.print_result("Test complet", False, str(e))
            self.solutions.append("Erreur lors du test complet - voir d√©tails ci-dessus")
            return False

    def run_full_diagnostic(self):
        """Ex√©cuter le diagnostic complet"""
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                          DIAGNOSTIC SATELIX                                 ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

        # Tests dans l'ordre
        tests = [
            ("Configuration", self.test_configuration),
            ("Connectivit√© r√©seau", self.test_network_connectivity),
            ("Acc√®s HTTP", self.test_http_access),
            ("Pr√©requis Selenium", self.test_selenium_requirements),
            ("Connexion compl√®te", self.test_full_connection)
        ]

        results = {}
        for test_name, test_func in tests:
            try:
                results[test_name] = test_func()
            except Exception as e:
                print(f"\n‚ùå ERREUR lors du test '{test_name}': {e}")
                results[test_name] = False

        # R√©sum√©
        self.print_section("R√âSUM√â DU DIAGNOSTIC")

        success_count = sum(results.values())
        total_count = len(results)

        print(f"Tests r√©ussis: {success_count}/{total_count}")

        if success_count == total_count:
            print("\nüéâ TOUS LES TESTS SONT OK !")
            print("Le probl√®me peut venir des identifiants ou d'un changement r√©cent de l'interface.")
        else:
            print(f"\n‚ö†Ô∏è  {total_count - success_count} probl√®me(s) d√©tect√©(s)")

        # Solutions propos√©es
        if self.solutions:
            self.print_section("SOLUTIONS PROPOS√âES")
            for i, solution in enumerate(self.solutions, 1):
                print(f"{i}. {solution}")

        return success_count == total_count


def main():
    """Point d'entr√©e principal"""
    diagnostic = SatelixDiagnostic()

    try:
        diagnostic.run_full_diagnostic()
    except KeyboardInterrupt:
        print("\n\nDiagnostic interrompu par l'utilisateur.")
    except Exception as e:
        print(f"\nErreur inattendue: {e}")

    print("\n" + "="*60)
    print("Diagnostic termin√©. Appuyez sur Entr√©e pour continuer...")
    input()


if __name__ == "__main__":
    main()